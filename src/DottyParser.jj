/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  FORCE_LA_CHECK=true;
  LOOKAHEAD=1;  static = true;}

/**
* Regras:
* 	1ª Deve ser iniciado com "digraph{";
*	2ª De seguida deve ter os estado inicial e estados finais definidos;
*	3ª Posteriormente deve apresentar todas as ligações entre os vértices
* (o estado inicial é representado por "");
* 	4ª Por fim, deve acabar com "}";
*	5ª Todos as ligações entre os nós (arestas), devem ser compostas por um label, mesmo que este represente o vazio.
*/PARSER_BEGIN(EG1)import javax.swing.*;import javax.swing.filechooser.FileNameExtensionFilter;import java.awt.*;import javax.swing.*;import java.awt.event.KeyEvent;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.io.*;public class EG1{  private static FileInputStream in = null;  private static EG1 parser = null;  public static void main(String args []) throws ParseException  {    //SET LOOK AND FEEL    try    {      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());    }    catch (UnsupportedLookAndFeelException e)    {}    catch (ClassNotFoundException e)    {}    catch (InstantiationException e)    {}    catch (IllegalAccessException e)    {}    //JFRAME    JFrame frame = new JFrame("Autoanalyze - The Automata Analyzer");
    frame.setIconImage(Toolkit.getDefaultToolkit().getImage("digraph.png"));    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);    JTextArea text=new JTextArea();
    text.setEditable(false);    text.setPreferredSize(new Dimension(500, 200));
    redirectConsoleTo(text);
    JScrollPane scroll=new JScrollPane(text);    frame.add(scroll, BorderLayout.CENTER);    //JMENU BAR
    JMenuBar menuBar = new JMenuBar();    JMenu menu = new JMenu("File");    JMenuItem chooseFileButtom = new JMenuItem("Choose File", KeyEvent.VK_F1);    menu.add(chooseFileButtom);    chooseFileButtom.addActionListener(new ActionListener()    {      @ Override public void actionPerformed(ActionEvent event)      {        System.out.println("Reading data...");        //JFILECHOOSER
        JFileChooser chooser = new JFileChooser();        FileNameExtensionFilter filter = new FileNameExtensionFilter("Dotty File", "gv");        chooser.setFileFilter(filter);        int returnval = chooser.showOpenDialog(null);        if (returnval == JFileChooser.APPROVE_OPTION)        {          System.out.println("You chose to open this file: " + chooser.getSelectedFile().getName());        }        /*message = readFile(chooser.getSelectedFile());*/        try        {          in = new FileInputStream(chooser.getSelectedFile());          showFile(chooser.getSelectedFile());          parser = new EG1(in);          parser.ExprS();          in.close();        }        catch (FileNotFoundException e)        {          e.printStackTrace();        }        catch (ParseException e)        {          e.printStackTrace();        }        catch (IOException e)        {          e.printStackTrace();        }      }    }    );    menuBar.add(menu);    frame.setJMenuBar(menuBar);    //Display the window. 
    frame.setLocationRelativeTo(null);    frame.pack();    frame.setVisible(true);  }  public static void showFile(File file)  {    StringBuilder builder = new StringBuilder();    int ch;    try    {      FileInputStream in = new FileInputStream(file);      while ((ch = in.read()) != - 1)      {        builder.append((char) ch);      }      in.close();      System.out.println(builder.toString());    }    catch (IOException e)    {      e.printStackTrace();    }  }  public static void redirectConsoleTo(final JTextArea textarea)  {    PrintStream out = new PrintStream(new ByteArrayOutputStream()    {      public synchronized void flush() throws IOException      {        textarea.setText(toString());      }    }    , true);    System.setErr(out);    System.setOut(out);  }}PARSER_END(EG1)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : /* OPERATORS */{  //< NODE: ["a"-"z","A"-"Z","0"-"9"] >|
  < EDGE : "->" >| < TYPE : "digraph" >| < OPEN : "{" >| < CLOSE : "}" >| < OPEN1 : "[" >| < CLOSE1 : "]" >| < LABEL : "label=" >| < SHAPE : "[shape=none]" >| < INITIAL : "\"\"" >| < FINAL : "[shape=doublecircle]" >| < OP : "*" | "+" >| < DIGIT : ([ "0"-"9" ]) >
| < VAR : ([ "a"-"z" ]|["A"-"Z"]) >
| < LABELVALUE: ~["[","]"]>
| < EPSILON: "?!" >/*| < TERM :    (      [ "A"-"Z" ]    | [ "0"-"9" ]    )+ >*/}void ExprS() :{}{ try  {    (< TYPE > < OPEN > {Graph();} < CLOSE >)    {      System.out.println("MATCH");    }  }  catch (ParseException e)  {    System.out.println("NOT MATCH");  }}

void Graph():{}
{
	(< INITIAL > < SHAPE > (< VAR > < FINAL >)+ < INITIAL > < EDGE > < VAR >{Vev();})
}

void Vev():{}
{
	((< VAR >< EDGE >< VAR >{Label();})+)
}

void Label():{}
{
	(< OPEN1 >< LABEL >((< LABELVALUE >)+ | < VAR > | < DIGIT >)< CLOSE1 >)
}