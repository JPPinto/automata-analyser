/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;}PARSER_BEGIN(EG1)import javax.swing.*;import javax.swing.filechooser.FileNameExtensionFilter;import java.awt.*;import javax.swing.*;
import java.awt.event.KeyEvent;public class EG1{  public static void main(String args []) throws ParseException  {    EG1 parser = new EG1(System.in);    while (true)    {      //JFRAME      JFrame frame = new JFrame("Simple GUI");      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);      JLabel textLabel = new JLabel("I'm a label in the window", SwingConstants.CENTER);      textLabel.setPreferredSize(new Dimension(300, 100));      frame.getContentPane().add(textLabel, BorderLayout.CENTER);      //Display the window. 
      frame.setLocationRelativeTo(null);      frame.pack();      frame.setVisible(true);      //JMENU BAR
      JMenuBar menuBar = new JMenuBar();
      JMenu menu = new JMenu("File");
      JMenuItem chooseFileButtom = new JMenuItem("Choose File", KeyEvent.VK_F1);
      menu.add(chooseFileButtom);
      menuBar.add(menu);
      frame.setJMenuBar(menuBar);
      
      //JFILECHOOSER      JFileChooser chooser = new JFileChooser();      FileNameExtensionFilter filter = new FileNameExtensionFilter("Dotty File", "gv");      chooser.setFileFilter(filter);      int returnval = chooser.showOpenDialog(frame);      if (returnval == JFileChooser.APPROVE_OPTION)      {        System.out.println("You chose to open this file: " + chooser.getSelectedFile().getName());      }      System.out.println("Reading from standard input...");      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");      try      {        switch (EG1.one_line())        {          case 0 : System.out.println("OK.");          break;          case 1 : System.out.println("Goodbye.");          break;          default : break;        }      }      catch (Exception e)      {        System.out.println("NOK.");        System.out.println(e.getMessage());        EG1.ReInit(System.in);      }      catch (Error e)      {        System.out.println("Oops.");        System.out.println(e.getMessage());        break;      }    }  }}PARSER_END(EG1)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : /* OPERATORS */{  //< NODE: ["a"-"z","A"-"Z","0"-"9"] >|
  < EDGE : "->" >| < TYPE : "digraph" >| < OPEN : "{" >| < CLOSE : "}" >| < TERMINATOR : ";" >| < OPEN1 : "[" >| < CLOSE1 : "]" >| < LABEL : "label=" >| < FIRST : "\"\" [shape=none]" >| < INITIAL : "\"\"" >| < FINAL : "[shape=doublecircle]" >| < OP :    "*"  | "+" >| < DIGIT : ([ "0"-"9" ])+ >| < VAR : ([ "a"-"z" ])+ >| < TERM :    (      [ "a"-"z" ]    | [ "A"-"Z" ]    | [ "0"-"9" ]    )* >}void ExprS() :{}{  try  {    (< TYPE > < OPEN > < FIRST > < INITIAL > < EDGE > < VAR > (< VAR > < EDGE > < VAR > (< OPEN1 > < LABEL > < TERM > < CLOSE1 >)) * < VAR > < FINAL >)    {      System.out.println("MATCH");    }  }  catch (ParseException e)  {    System.out.println("NOT MATCH");  }}int one_line() :{}{  ExprS()  {    return 0;  }| ";"  {    return 1;  }}