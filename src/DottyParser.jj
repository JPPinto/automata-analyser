options{  JDK_VERSION = "1.6";  FORCE_LA_CHECK=true;
  LOOKAHEAD=1;  static = false;}

/**
* Regras:
* 	1ª Deve ser iniciado com "digraph{";
*	2ª De seguida deve ter os estado inicial e estados finais definidos;
*	3ª Posteriormente deve apresentar todas as ligações entre os vértices
* (o estado inicial é representado por "");
* 	4ª Por fim, deve acabar com "}";
*	5ª Todos as ligações entre os nós (arestas), devem ser compostas por um label, mesmo que este represente o vazio.
*/PARSER_BEGIN(EG1)import javax.swing.*;import javax.swing.filechooser.FileNameExtensionFilter;import java.awt.*;import javax.swing.*;import java.awt.event.KeyEvent;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.io.*;import javax.swing.border.Border;import Automata.Automata;public class EG1{  private static FileInputStream in = null;  private static EG1 parser = null;  private static JPanel leftMidRightPanel = new JPanel(new GridLayout(1,3));  private static int numGraphs=0;  private static Automata[] automatas= new Automata[3];  public static void main(String args []) throws ParseException  {    //SET LOOK AND FEEL    setLookAndFeel();    
	//JFRAME    final JFrame frame = new JFrame("Autoanalyze - The Automata Analyzer");
    frame.setIconImage(Toolkit.getDefaultToolkit().getImage("digraph.png"));    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

	//Set to Screen Size
    Toolkit toolkit = Toolkit.getDefaultToolkit();
	Dimension scrnsize = toolkit.getScreenSize();
    frame.setPreferredSize(scrnsize);

	//Add TextArea
    JTextArea text=new JTextArea();
    text.setEditable(false);
    redirectConsoleTo(text);
    JScrollPane scroll=new JScrollPane(text);    Border borderTextArea = BorderFactory.createLineBorder(new Color(75,172,198), 10);    scroll.setBorder(borderTextArea);
	//Add Separators
	JPanel topDownPanel = new JPanel(new GridLayout(2,1));
	topDownPanel.add(leftMidRightPanel);
	topDownPanel.add(scroll);    leftMidRightPanel.add(createEmptyPanel());    leftMidRightPanel.add(createEmptyPanel());    leftMidRightPanel.add(createEmptyPanel());
	frame.add(topDownPanel);

	//Add JMENU BAR
    JMenuBar menuBar = new JMenuBar();    JMenu menu = new JMenu("File");
    JMenu menu1 = new JMenu("Operations");    JMenu menu2 = new JMenu("Help");
    //File    JMenuItem chooseFileButtom = new JMenuItem("Choose File", KeyEvent.VK_F1);
    ImageIcon fileImg = new ImageIcon("file.png");
    chooseFileButtom.setIcon(fileImg);
    JMenuItem saveButtom = new JMenuItem("Save", KeyEvent.VK_F1);
    ImageIcon saveImg = new ImageIcon("save.png");
    saveButtom.setIcon(saveImg);    menu.add(chooseFileButtom);    menu.add(saveButtom);
    //Operations
    JMenuItem cartesianProduct = new JMenuItem("Cartesian Product", KeyEvent.VK_F1);
    JMenuItem intersection = new JMenuItem("Intersection", KeyEvent.VK_F1);    JMenu complement = new JMenu("Complement");    JMenuItem graph1 = new JMenuItem("1º Automata", KeyEvent.VK_F1);    JMenuItem graph2 = new JMenuItem("2º Automata", KeyEvent.VK_F1);    complement.add(graph1);    complement.add(graph2);
    menu1.add(cartesianProduct);
    menu1.add(intersection);
    menu1.add(complement);    //Help    JMenuItem subtitles = new JMenuItem("Subtitles", KeyEvent.VK_F1);    JMenuItem about = new JMenuItem("About", KeyEvent.VK_F1);    menu2.add(subtitles);    menu2.add(about);
    //Choose File Action    chooseFileButtom.addActionListener(new ActionListener()    {      @ Override public void actionPerformed(ActionEvent event)      {        System.out.println("Reading data...");        //JFILECHOOSER
        JFileChooser chooser = new JFileChooser();        FileNameExtensionFilter filter = new FileNameExtensionFilter("Dotty File", "gv");        chooser.setFileFilter(filter);        int returnval = chooser.showOpenDialog(frame);        if (returnval == JFileChooser.APPROVE_OPTION)        {          System.out.println("You chose to open this file: " + chooser.getSelectedFile().getName());        }
        try{          in = new FileInputStream(chooser.getSelectedFile());          String fileContent = showFile(chooser.getSelectedFile());          System.out.println(fileContent);          Automata automata = new Automata(fileContent);          automatas[numGraphs]=automata;          automata.acceptsSequence("aa", automata.getInitialVertex());          Border borderAutomata = BorderFactory.createLineBorder(new Color(247,150,70), 10);          automata.setBorder(borderAutomata);     	  automata.setBackground(Color.WHITE);          leftMidRightPanel.remove(numGraphs);          leftMidRightPanel.add(automata,numGraphs);          leftMidRightPanel.revalidate();          numGraphs=numGraphs==1 ? 0 : numGraphs+1;          parser = new EG1(in);          parser.ExprS();          in.close();        }catch (FileNotFoundException e){          e.printStackTrace();        }catch (ParseException e){          e.printStackTrace();        }catch (IOException e){          e.printStackTrace();        }catch (NullPointerException e){}      }    }    );	//Complement action to graph 1    graph1.addActionListener(new ActionListener()    {      @ Override public void actionPerformed(ActionEvent event)      {          if(automatas[0]!=null){	          Automata automata = automatas[0].getComplement();          	  automatas[2] = automata;	          Border borderAutomata = BorderFactory.createLineBorder(new Color(247,150,70), 10);	          automata.setBorder(borderAutomata);	     	  automata.setBackground(Color.WHITE);          	  leftMidRightPanel.remove(2);	          leftMidRightPanel.add(automatas[2],2);	          leftMidRightPanel.revalidate();          }else{            JOptionPane.showMessageDialog(frame, "You need to open an automata first.", "Warning", JOptionPane.WARNING_MESSAGE);          }      }    }    );	//Complement action to graph 2    graph2.addActionListener(new ActionListener()    {      @ Override public void actionPerformed(ActionEvent event)      {          if(automatas[1]!=null){	          Automata automata = automatas[1].getComplement();          	  automatas[2]=automata;	          Border borderAutomata = BorderFactory.createLineBorder(new Color(247,150,70), 10);	          automata.setBorder(borderAutomata);	     	  automata.setBackground(Color.WHITE);          	  leftMidRightPanel.remove(2);	          leftMidRightPanel.add(automatas[2],2);	          leftMidRightPanel.revalidate();          }else{            JOptionPane.showMessageDialog(frame, "You need to open an automata first.", "Warning", JOptionPane.WARNING_MESSAGE);          }      }    }    );	//Save File Action	saveButtom.addActionListener(new ActionListener(){      @ Override public void actionPerformed(ActionEvent event){        	if(automatas[2]!=null){		      	JFileChooser chooser=new JFileChooser("C:/");	        	FileNameExtensionFilter filter = new FileNameExtensionFilter("Dotty File", "gv");				chooser.addChoosableFileFilter(filter);								int retrival=chooser.showSaveDialog(frame);								if (retrival == JFileChooser.APPROVE_OPTION){					File fileToSave = chooser.getSelectedFile();	    				    			if(!fileToSave.getAbsolutePath().toLowerCase().endsWith(".gv")){    					fileToSave = new File(fileToSave.getAbsolutePath() + ".gv");					}					PrintWriter writer=null;					try {						writer = new PrintWriter(fileToSave.getAbsolutePath(), "UTF-8");					} catch (FileNotFoundException e){						e.printStackTrace();					}catch(UnsupportedEncodingException e){						e.printStackTrace();					}                    writer.println(automatas[2].convertToDotty());                    writer.close();				}			}else{            	JOptionPane.showMessageDialog(frame, "You need to do some operation first", "Warning", JOptionPane.WARNING_MESSAGE);          	}		}    }    );    cartesianProduct.addActionListener(new ActionListener(){      @ Override public void actionPerformed(ActionEvent event){        	if(automatas[0]!=null && automatas[1]!=null){				Automata automata = automatas[0].getCartesianProduct(automatas[1]);          	  	automatas[2]=automata;	          	Border borderAutomata = BorderFactory.createLineBorder(new Color(247,150,70), 10);	          	automata.setBorder(borderAutomata);	     	  	automata.setBackground(Color.WHITE);          	  	leftMidRightPanel.remove(2);	          	leftMidRightPanel.add(automatas[2],2);	          	leftMidRightPanel.revalidate();        	}else{            	JOptionPane.showMessageDialog(frame, "You need to open an automata first.", "Warning", JOptionPane.WARNING_MESSAGE);        	}		}    }    );        menuBar.add(menu);
    menuBar.add(menu1);    menuBar.add(menu2);        frame.setJMenuBar(menuBar);    //Display the window.
    frame.pack();
    frame.setLocationRelativeTo(null);    frame.setVisible(true);  }  public static JPanel createEmptyPanel(){	 Border borderAutomata = BorderFactory.createLineBorder(new Color(247,150,70), 10);     JPanel panel=new JPanel();     panel.setBorder(borderAutomata);     panel.setBackground(Color.WHITE);     return panel;  }

  public static void setLookAndFeel(){  	try{
      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
    }catch (UnsupportedLookAndFeelException e){}
    catch (ClassNotFoundException e){}
    catch (InstantiationException e){}
    catch (IllegalAccessException e){}
  }  public static String showFile(File file)  {    StringBuilder builder = new StringBuilder();    int ch;    try    {      FileInputStream in = new FileInputStream(file);      while ((ch = in.read()) != - 1)      {        builder.append((char) ch);      }      in.close();    }    catch (IOException e)    {      e.printStackTrace();    }    return builder.toString();  }  public static void redirectConsoleTo(final JTextArea textarea)  {    PrintStream out = new PrintStream(new ByteArrayOutputStream()    {      public synchronized void flush() throws IOException      {        textarea.setText(toString());      }    }    , true);    System.setErr(out);    System.setOut(out);  }}PARSER_END(EG1)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : /* OPERATORS */{  //< NODE: ["a"-"z","A"-"Z","0"-"9"] >|  < EDGE : "->" >| < TYPE : "digraph" >| < OPEN : "{" >| < CLOSE : "}" >| < OPEN1 : "[" >| < CLOSE1 : "]" >| < LABEL : "label=" >| < SHAPE : "[shape=none]" >| < INITIAL : "\"\"" >| < FINAL : "[shape=doublecircle]" >| < OP : "*" | "+" >| < DIGIT : ([ "0"-"9" ]) >| < VAR : ([ "a"-"z" ]|["A"-"Z"])([ "a"-"z" ]|["A"-"Z"]|<  DIGIT >)* >| < LABELVALUE: ~["[","]"]>| < EPSILON: "?!" >/*| < TERM :    (      [ "A"-"Z" ]    | [ "0"-"9" ]    )+ >*/}void ExprS() :{}{ try  {    (< TYPE > < OPEN > {Graph();} < CLOSE >)    {      System.out.println("MATCH");    }  }  catch (ParseException e)  {    System.out.println("NOT MATCH");  }}void Graph():{}{	(< INITIAL > < SHAPE > (< VAR > < FINAL >)+ < INITIAL > < EDGE > < VAR >{Vev();})}void Vev():{}{	((< VAR >< EDGE >< VAR >{Label();})+)}void Label():{}{	(< OPEN1 >< LABEL >((< LABELVALUE >)+ | < VAR > | < DIGIT >)< CLOSE1 >)}